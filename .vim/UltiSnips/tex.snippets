# Latex snippets

global !p


####################
# Define Math zone #
####################

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

##########################
# Smart table geenration #
##########################

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)
	
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
	
		final_str += " \\\\\\\n"
	
	
	final_str += old_spacing + "\\end{tabular}\n$0"
	
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"
	snip.expand_anon(final_str)

endglobal


################
# Environments #
################


snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet def "Definitions" bA
\begin{define}{$1}
	$0
\end{define}
endsnippet

snippet thm "Theorems" bA
\begin{theorem}{$1}
	$0
\end{theorem}
endsnippet

snippet ftr "Future Work" bA
\begin{future}
	$0
\end{future}
endsnippet

snippet law "Law" bA
\begin{law}{$1}
	$0
\end{law}
endsnippet

snippet cor "Corollary" bA
\begin{corollary}{$1}
	$0
\end{corollary}
endsnippet

snippet sltn "Solution" bA
\begin{solution}
	$0
\end{solution}
endsnippet

snippet prop "Propostion" bA
\begin{prop}
	$0
\end{prop}
endsnippet

snippet proof "Definitions" bA
\begin{proof}
	$0
\end{proof}
endsnippet

snippet lemma "Lemma" bA
\begin{lemma}
	$0
\end{lemma}
endsnippet

snippet remark "Remark" bA
\begin{remark}
	$0
\end{remark}
endsnippet

snippet axiom "Axiom" bA
\begin{axiom}
	$0
\end{axiom}
endsnippet

snippet saxiom "Sub axiom" bA
\begin{subaxiom}
	$0
\end{subaxiom}
endsnippet

snippet matlab "listing" bA
\begin{lstlisting}[language=MATLAB]
$0
\end{lstlisting}
endsnippet


#####################
# Table environment #
#####################


pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r  
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}

		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}

	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
	\caption{${2:caption}}
	\label{tab:${3:label}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet tikz "Tikzpicture environment" bA
\begin{figure}[H]
	\centering
	\begin{tikzpicture}
		$1
	\end{tikzpicture}
	\caption{$2}
\end{figure}
endsnippet

snippet circuit "circuit environment" bA
\begin{figure}[H]
	\centering
	\begin{circuitikz}
		$1
	\end{circuitikz}
	\caption{$2}
\end{figure}
endsnippet


#####################
# Math envirnoments #
#####################


snippet bm "Block math" bA
\[
	$0
\]
endsnippet

snippet ./ "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']: snip.rv = ' '
else: snip.rv = ''
`$2
endsnippet

snippet /. "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']: snip.rv = ' '
else: snip.rv = ''
`$2
endsnippet

snippet equ "Equation" bA
\begin{equation}
	$0
\end{equation}
endsnippet

snippet *equ "Equation" bA
\begin{equation*}
	$0
\end{equation*}
endsnippet

snippet verb "Inline code" w
\verb!$1!$0
endsnippet

priority 100
snippet "(\\?\w+)(';|;')" "chem postfix" riA
\ce{`!p snip.rv=match.group(1)`}
endsnippet 

priority 50
snippet ;' "Chem eq" A
\ce{$1}$2
endsnippet

priority 50
snippet '; "Chem eq" A
\ce{$1}$2
endsnippet

################################
# Parts, chapters and sections #
################################


snippet part "Part" b
\part{${1:part name}}
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet chap "Chapter" b
\chapter{${1:chapter name}}
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section" bA
\section{${1:${VISUAL:section name}}}

$0
endsnippet

snippet lsec "Section" bA
\section{${1:${VISUAL:section name}}}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet *sec "Section" bA
\section*{${1:${VISUAL:section name}}}

$0
endsnippet


snippet sub "Subsection" bA
\subsection{${1:${VISUAL:subsection name}}}

$0
endsnippet

snippet lsub "Subsection" bA
\subsection{${1:${VISUAL:subsection name}}}
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet *sub "Subsection" bA
\subsection*{${1:${VISUAL:subsection name}}}

$0
endsnippet

snippet ssub "Subsubsection" bA
\subsubsection{${1:${VISUAL:subsubsection name}}}

$0
endsnippet

snippet lssub "Subsubsection" bA
\subsubsection{${1:${VISUAL:subsubsection name}}}
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet *ssub "Subsubsection" bA
\subsubsection*{${1:${VISUAL:subsubsection name}}}

$0
endsnippet

snippet par "paragraph" bA
\paragraph{}
$0
endsnippet


###########################
# ASCII math replacements #
###########################

context "math()"
snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet <= "le" Ai
\le
endsnippet

context "math()"
snippet >= "ge" Ai
\ge
endsnippet

snippet \le> "<=>" Ai
<=>
endsnippet


context "math()"
snippet :. "therefore" Ai
\therefore
endsnippet

context "math()"
snippet oc "proportional" Ai
\propto
endsnippet

context "math()"
snippet oo "Infinity" Ai
\infty
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet != "not equal" iA
\neq
endsnippet

context "math()"
snippet EE "exists" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

priority 100
snippet cdot* "cdot" iA
cdots
endsnippet

priority 100
snippet "\.\.\.\s" "ldots" riA
\ldots 
endsnippet

priority 500
snippet "(\+|\-|\\times|\\cdot)..." "ldots" iA
`!p snip.rv=match.group(1)`\cdots
endsnippet

priority 500
snippet "(\+|\-|\\times|\\cdot) ..." "ldots" iA
`!p snip.rv=match.group(1)` \cdots
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet -> "to" Ai
\to
endsnippet

context "math()"
snippet |-> "mapsto" Ai
\mapsto
endsnippet

context "math()"
snippet >> "gg" Ai
\gg
endsnippet

context "math()"
snippet ~~ "similar" Ai
\sim
endsnippet

context "math()"
snippet sq "square" iA
^2
endsnippet

context "math()"
snippet cb "cube" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rt "sqrt" A
\sqrt{$0}
endsnippet

context "math()"
snippet del "partial operator" iA
\partial
endsnippet


########
# Sets #
########


context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet CC "Complex numbers" Ai
\mathbb{C}
endsnippet

context "math()"
snippet RR "Real numbers" Ai
\mathbb{R}
endsnippet

context "math()"
snippet QQ "Rational" Ai
\mathbb{Q}
endsnippet

context "math()"
snippet NN "Naturals" Ai
\mathbb{N}
endsnippet

context "math()"
snippet "([A-Z])cal" "Volume" rAi
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet


##############
# Diacritics #
##############


priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
`!p
g1 = match.group(1)
if g1 != 'h':
	snip.rv = '\\overline{'+g1+'}'
else:
	snip.rv = '\hbar'
`
endsnippet

priority 10
context "math()"
snippet "(?<!\\)dot" "dot" riA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-ce-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(?<!\\)ddot" "ddot" riA
\ddot{$1}$0
endsnippet

priority 1000
context "math()"
snippet "([a-zA-Z])ddot" "ddot" riA
\ddot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "(?<!\\)hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "\\vb\{([^\s]+?)\}hat" "Unit vector" riA
`!p snip.rv = '\\vu{'+match.group(1)+'}'`
endsnippet

context "math()"
snippet "(d?\\?\w+)(,\.|\.,)" "Vector postfix" riA
`!p
g1 = match.group(1)
if g1[0] == 'd' and len(g1) > 1:
	snip.rv='d\\vb{'+match.group(1)[1:]+'}'
else:
	snip.rv='\\vb{'+match.group(1)+'}'
`
endsnippet 

context "math()"
snippet "(d?\\?\w+)(/\.|\./)" "Tensor postfix" riA
`!p
g1 = match.group(1)
if g1[0] == 'd' and len(g1) > 1:
	snip.rv='d\\tens{'+match.group(1)[1:]+'}'
else:
	snip.rv='\\tens{'+match.group(1)+'}'
`
endsnippet 

priority 10
context "math()"
snippet "(\s)(?<!\\)d(\\*[a-zA-Z\{\}\\]*)\s" "d postfix" rA
`!p
if len(match.group(2)) > 0:
	snip.rv = match.group(1) + '\dd{' + match.group(2) + '} '
else:
	snip.rv=match.group(1) + 'd '`
endsnippet 

priority 100
context "math()"
snippet "(\s)d(\\*[a-zA-Z\{\}\\]*)d(\\*[a-zA-Z\{\}\\]*)_*(\d)*\s" "derivative postfix" rA
`!p snip.rv=match.group(1)`\dv`!p snip.rv = '['+match.group(4)+']' if match.group(4)!=None else ''``!p
snip.rv='{'+match.group(2)+'}' if match.group(2)!='' else ''
`{`!p snip.rv=match.group(3)`} 
endsnippet

priority 100
context "math()"
snippet "(\s)p(\\*[a-zA-Z\{\}\\]*)p(\\*[a-zA-Z\{\}\\]*)_*(\d)*\s" "partial derivative postfix" rA
`!p snip.rv=match.group(1)`\pdv`!p snip.rv = '['+match.group(4)+']' if match.group(4)!=None else ''``!p
snip.rv='{'+match.group(2)+'}' if match.group(2)!='' else ''
`{`!p snip.rv=match.group(3)`} 
endsnippet

###################
# x, y, z sub ijn #
###################

# priority 100
# context "math()"
# snippet "([axyz])([ijmn])" "Subscripts postfix" riA
# `!p snip.rv=match.group(1)`_`!p snip.rv=match.group(2)`
# endsnippet

priority 100
context "math()"
snippet "_([a-z\d])([a-z\d])" "Subscripts postfix" riA
_{`!p snip.rv=match.group(1)``!p snip.rv=match.group(2)`}
endsnippet

priority 100
context "math()"
snippet "_([a-z\d])([\+\-]\d)" "Subscripts postfix" riA
_{`!p snip.rv=match.group(1)``!p snip.rv=match.group(2)`}
endsnippet

##########################
# Mathematical functions #
##########################


priority 100
context "math()"
snippet '(?<!\\)(cos|tan|cot|csc|sec|ln|log|exp|star|perp|partial|nabla|infty)' "functions" rA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 150
context "math()"
snippet '(?<!\\)(sin|not|to|pi|sum|zeta|tau|omega|psi|Psi|phi|Phi|lim)' "functions" rA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|iint|iiint|oint|oiint|oiiint)' "functions" rA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet in "in" A
\in
endsnippet

context "math()"
snippet sub "subset" A
\subset
endsnippet

snippet \o\int "oint funny business" A
\oint
endsnippet

snippet \oi\int "oint funny business" A
\oiint
endsnippet

snippet \oii\int "oint funny business" A
\oiiint
endsnippet

snippet i\in "funny business" A
\iin
endsnippet


#####################
# Fraction handling #
#####################


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# snippet / "Fraction" i
# \\frac{${VISUAL}}{$1}$0
# endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


##################
# Auto subscript #
##################

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


#####################
# Sympy integration #
#####################


snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
	.replace('^', '**') \
	.replace('{', '(') \
	.replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
ret  = subprocess.check_output(['wolframscript.exe', '-code', code]).decode('utf-8')
snip.rv = ret.replace('\r', '')
`
endsnippet

##################
# Chess snippets #
##################

snippet board "Chessboard figure" b
\begin{figure}[H]
	\centering\chessboard
	\caption{$1}
\end{figure}
endsnippet

snippet boardmove "Chessboard with moves" b
\begin{figure}[H]
	\centering\chessboard[color=red,linewidth=3pt,pgfstyle=straightmove,
		markmoves={$1}]
	\caption{$2}
\end{figure}
endsnippet

snippet invboard "Chessboard figure" b
\begin{figure}[H]
	\centering\chessboard[inverse]
	\caption{$1}
\end{figure}
endsnippet

snippet invboardmove "Chessboard with moves" b
\begin{figure}[H]
	\centering\chessboard[inverse,color=red,linewidth=3pt,pgfstyle=straightmove,
		markmoves={$1}]
	\caption{$2}
\end{figure}
endsnippet


